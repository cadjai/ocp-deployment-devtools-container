#!/usr/local/bin/ansible-playbook --inventory=inventory
- name: ' Konductor | Provision UPI Infra | build-devops-container-images.yml' 
  hosts: localhost 
  vars_files:
    #- 'vars/vault.yml'
    - 'vars/container-build.yml'
    - 'vars/clients.yml'
  vars:
    ansible_python_interpreter: /usr/bin/python3
    module: "build-ocp-deployment-devops-container-image"
    ansible_name_module: " Konductor | Provision UPI Infra | {{ module }}"

  pre_tasks:
    - name: '{{ ansible_name_module }} | Ensure podman is installed on host'
      ansible.builtin.shell: >
        which podman
      ignore_errors: yes
      register: podman_binary

    - ansible.builtin.assert:
        that:
          - podman_binary is defined
          - podman_binary.rc is defined 
          - podman_binary.rc == 0
          - podman_binary.stdout is defined 
        msg: "Podman is required on this host before running this "

  tasks:
    - name: '{{ ansible_name_module }} | Download Clients if necessary'
      when:
        - download_clients is defined
        - download_clients | bool
        - clients is defined 
        - clients.items is defined 
        - clients.items() | length > 0 
      block:
        - name: '{{ ansible_name_module }} | Set Client packages download destination'
          ansible.builtin.set_fact:
            clients_dir: "{{ playbook_dir }}/{{ tooling_image_build_context_dir_prefix }}/context/_build/clients"
          when:
            - not clients_dir is defined or clients_dir == ''

        - name: '{{ ansible_name_module }} | Ensure Client packages download destination exists'
          ansible.builtin.file:
            path: "{{ clients_dir }}"
            state: directory
            mode: '0755'

        - ansible.builtin.debug:
            msg:
              - "{{ item.value.url }}{{ (item.value.pkg_version + '/') if item.value.pkg_version is defined and item.value.pkg_version != '' else ''}}{{ item.value.pkg_name }}{{ item.value.pkg_suffix }}"
              - "{{ clients_dir }}/{{ item.value.pkg_name }}{{ item.value.pkg_extention }}"
          with_dict: "{{ clients }}"

        - name: '{{ ansible_name_module }} | Download binaries'
          ansible.builtin.get_url:
            url: "{{ item.value.url }}{{ (item.value.pkg_version + '/') if item.value.pkg_version is defined and item.value.pkg_version != '' else ''}}{{ item.value.pkg_name }}{{ item.value.pkg_suffix }}"
            dest: "{{ clients_dir }}/{{ item.value.pkg_name }}{{ item.value.pkg_extention }}"
          with_dict:
            - "{{ clients }}"
          when:
            - download_clients is defined
            - download_clients | bool 
            - not download_local is defined or not download_local | bool

        - name: '{{ ansible_name_module }} | Download binaries from local repository'
          ansible.builtin.get_url:
            url: "{{ item.value.localurl }}{{ item.value.pkg_name }}{{ item.value.localpkg_suffix }}"
            dest: "{{ clients_dir }}/{{ item.value.pkg_name }}{{ item.value.pkg_extention }}"
            url_username: "{{ registry_admin_username }}"
            url_password: "{{ registry_admin_password }}"
            force_basic_auth: 'true'
            validate_certs: 'true'
            client_cert: ''
          with_dict:
            - "{{ clients }}"
          when:
            - download_clients is defined
            - download_clients | bool 
            - download_local is defined
            - download_local | bool

    - name: '{{ ansible_name_module }} | Render ansible.cfg for EE container if applicable'
      when:
        - configure_ansible_cfg is defined
        - configure_ansible_cfg | bool
      block: 
        ### use this when building on a connected host pulling from the RH automation hub
        - name: '{{ ansible_name_module }} | Render Ansible.cfg file'
          ansible.builtin.template:
            src: "templates/galaxy-automation-hub.cfg.j2"
            dest: "{{ tooling_image_build_context_dir }}/_build/scripts/ansible.cfg"
            force: true
          when:
            - use_automation_hub is defined 
            - use_automation_hub | bool 

        - name: '{{ ansible_name_module }} | Render Ansible.cfg file'
          ansible.builtin.template:
            src: "templates/galaxy.cfg.j2"
            dest: "{{ tooling_image_build_context_dir }}/_build/scripts/ansible.cfg"
            force: true
          when:
            - not use_automation_hub is defined  or not use_automation_hub | bool 

    - name: '{{ ansible_name_module }} | Set Tomorrow Date fact'
      ansible.builtin.set_fact:
        today_date: "{{ lookup('pipe', ' date +%Y%m%d') }}"

    - name: '{{ ansible_name_module }} | Set OCP Deploy Tooling Image name'
      ansible.builtin.set_fact:
        tooling_image_name: "ocp-devops-tooling-ee-supported-rhel8"
      when:
        - not tooling_image_name is defined or tooling_image_name == ''

    - name: '{{ ansible_name_module }} | Set Tooling Image Build Containerfile'
      ansible.builtin.set_fact:
        tooling_image_containerfile: "{{ playbook_dir }}/{{ tooling_image_build_context_dir }}/Containerfile"
      when:
        - not tooling_image_containerfile is defined or tooling_image_containerfile == ''

    - name: '{{ ansible_name_module }} | Set Tooling Image Build context dir'
      ansible.builtin.set_fact:
        tooling_image_build_context_dir: "{{ playbook_dir }}/{{ tooling_image_build_context_dir }}"
      when:
        - not tooling_image_build_context_dir is defined or tooling_image_build_context_dir == ''

    - name: '{{ ansible_name_module }} | Set Tooling Image Build registry_host_fqdn'
      ansible.builtin.set_fact:
        registry_host_fqdn: "localhost"
      when:
        - not registry_host_fqdn is defined or registry_host_fqdn == ''

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg_base_image: "{{ ('--build-arg BASE_IMAGE=' + tooling_image_build_arg_base_image_name + ' ') if tooling_image_build_arg_base_image_name is defined and tooling_image_build_arg_base_image_name != '' else '' }}"

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image label summary arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg_image_label_summary: "{{ ('--build-arg SUMMARY=' +  tooling_image_build_arg_image_label_summary_value + ' ') if tooling_image_build_arg_image_label_summary_value is defined and tooling_image_build_arg_image_label_summary_value != '' else '' }}"

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image label name arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg_image_label_name: "{{ ('--build-arg  NAME=' + tooling_image_build_arg_image_label_name_value + ' ') if  tooling_image_build_arg_image_label_name_value is defined and  tooling_image_build_arg_image_label_name_value != '' else '' }}"

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image label maintainer arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg_image_label_maintainer: "{{ ('--build-arg MAINTAINER=' + tooling_image_build_arg_image_label_maintainer_value + ' ') if tooling_image_build_arg_image_label_maintainer_value is defined and tooling_image_build_arg_image_label_maintainer_value != '' else '' }}"

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image build arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg: "{{ tooling_image_build_arg_base_image +  tooling_image_build_arg_image_label_summary + tooling_image_build_arg_image_label_name  + tooling_image_build_arg_image_label_maintainer }}"

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image diable layer caching arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg_nocache: "{{ ('--no-cache ') if disable_layer_caching is defined and  disable_layer_caching | bool else '' }}"

    - name: '{{ ansible_name_module }} | Set Tooling Image Build base image diable layer caching arg'
      ansible.builtin.set_fact:
        tooling_image_build_arg_layersquash: "{{ ('--squash-all ') if squash_layers is defined and squash_layers | bool else '' }}"

    - name: '{{ ansible_name_module }} | download oc compliance binary to be included into the build  Image'
      ansible.builtin.shell: >
        podman  run --authfile {{ registry_auth_config }}  --rm  -v {{ playbook_dir }}/context/_build:/mnt/out:Z {{ scan_results_export_image | default('registry.redhat.io/compliance/oc-compliance-rhel8:stable', true) }} /bin/cp /usr/bin/oc-compliance /mnt/out
      when:
        - push_tooling_image is defined
        - push_tooling_image | bool 
        - include_oc_compliance is defined
        - include_oc_compliance | bool 
      register: oc_compliance_binary_downloaded 

    - name: '{{ ansible_name_module }} | build Container Tooling Image'
      ansible.builtin.shell: >
        podman --log-level=debug build {{ tooling_image_build_arg_nocache }} {{ tooling_image_build_arg_layersquash }} -f {{ tooling_image_containerfile }} -t {{ registry_host_fqdn }}/{{ local_repository }}/{{ tooling_image_subrepository }}/{{ tooling_image_name }}:latest-{{ today_date }} {{ tooling_image_build_arg }} --runtime-flag debug {{ tooling_image_build_context_dir }} 
      register: bastion_container_built

    - name: '{{ ansible_name_module }} | tag Container Tooling Image'
      ansible.builtin.shell: >
        podman tag {{ registry_host_fqdn }}/{{ local_repository }}/{{ tooling_image_subrepository }}/{{ tooling_image_name }}:latest-{{ today_date }} {{ registry_host_fqdn }}/{{ local_repository }}/{{ tooling_image_subrepository }}/{{ tooling_image_name }}:latest
      when:
        - push_tooling_image is defined
        - push_tooling_image | bool 
      register: bastion_container_tagged

    - name: '{{ ansible_name_module }} | push Container Tooling Image'
      ansible.builtin.shell: >
        podman push --authfile {{ registry_auth_config }} {{ item }} 
      loop:
        - "{{ registry_host_fqdn }}/{{ local_repository }}/{{ tooling_image_subrepository }}/{{ tooling_image_name }}:latest-{{ today_date }}"
        - "{{ registry_host_fqdn }}/{{ local_repository }}/{{ tooling_image_subrepository }}/{{ tooling_image_name }}:latest"
      when:
        - push_tooling_image is defined
        - push_tooling_image | bool 
      register: bastion_container_pushed

    - name: '{{ ansible_name_module }} | podman:save | save Container Tooling Image'
      ansible.builtin.shell: >
        podman save -o {{ dir_bundle_location }}/{{ tooling_image_name }}-latest-image-{{ today_date }}.tar \
          {{ registry_host_fqdn }}/{{ local_repository }}/{{ tooling_image_subrepository }}/{{ tooling_image_name }}:latest-{{ today_date }} 
      register: bastion_container_saved
